\documentclass{article}
\parskip 3pt
\parindent 30pt
\usepackage[margin=1.25in]{geometry}
%\VignetteIndexEntry{Computing Summary Statistics for Daily Data}
%\VignetteDepends{USGSwsBase}

\begin{document}
\SweaveOpts{concordance=TRUE}
\raggedright
\parindent 30pt

\title{Computing Summary Statistics for Daily Data}

\author{Dave Lorenz}

\maketitle

These examples demonstrate how to compute selected summary statistics for daily streamflow data. The examples can easily be extended to other statistics or data types.

<<echo=TRUE>>=
# Load the USGSwsBase package
library(USGSwsBase)
library(dataRetrieval)
# Retrieve streamflow data for the Raccoon River at Van Meter, IA
# for the 30-year period beginning 1980-10-01.
# Use the renCol function to rename the streamflow column to Flow
RRVM <- renameNWISColumns(readNWISdv("05484500", "00060",startDate="1980-10-01", 
                        endDate="2010-09-30"))
# Print the first and last few rows of the data
head(RRVM)
tail(RRVM)
# Check for missing values
with(RRVM, screenData(Date, Flow, year = "water"))
@

\eject
\section{Computing Daily Mean Values}

The simplest and most straightforward way to compute summary statistics from arbitrarily grouped data is to use the \texttt{tapply} function. At its simplest, it requires only three arguments---\texttt{X}, the data to summarize; \texttt{INDEX}, the grouping data; and \texttt{FUN}, the summary statistic function.

The \texttt{USGSwsBase} package contains the \texttt{baseDay} function that can be used to group data by day, so that all data for each day, including February 29, can be summarized. The output can be arranged so that the sequence represents the calendar-, water- or climate-year; beginning January 1, October 1, or April 1.

The following script demonstrates how to use the \texttt{tapply} and \texttt{baseDay} functions to compute the daily mean streamflow for the previously retrieved data. It uses the \texttt{with} function to facilitate referring to columns in the dataset.

<<echo=TRUE>>=
# There are no missing values, so only need the basic 
# 3 arguments for tapply
RRVM.daily <- with(RRVM, tapply(Flow, 
    baseDay(Date, numeric=FALSE, year="water"), mean))
# Print the first and last few values of the output
head(RRVM.daily)
tail(RRVM.daily)
@

The output from \texttt{tapply} is an array. Because the output from this example is an array of one dimension, it is printed in the form of a named vector. Had the summary statistic function been \texttt{quantile}, for example, the output would have been a list.

The \texttt{tapply} function is very powerful and easy to use. But there are times when we want the output in the form of a dataset rather than a vector or array. In those cases, the \texttt{aggregate} function is a better alternative. The \texttt{aggregate} function has several usage options. The script below demonstrates how to build a formula to compute the same statistics that we computed in the previous script. Early versions of \texttt{aggregate} required the output of the summary statistic function to be a scalar, but that is no longer a limitation.

<<echo=TRUE>>=
# There are no missing values
RRVM.dailyDF <- aggregate(Flow ~ 
    baseDay(Date, numeric=FALSE, year="water"), 
    data=RRVM, FUN=mean)
# Print the first and last few values of the output
head(RRVM.dailyDF)
tail(RRVM.dailyDF)
# Change the name of the grouping column
names(RRVM.dailyDF)[1] <- "Day"
@

Note that the grouping column, now called Day, is a factor. There are times when it would be better to be a simple character. It can easily be converted by the executing the expression:\newline \texttt{RRVM.dailyDF\$Day <- as.character(RRVM.dailyDF\$Day)}.

\eject
\section{Computing Annual Mean Values}

The example above can easily be expanded to any grouping that the user desires. This example computes annual means by water year. The \texttt{waterYear} function in \texttt{USGSwsBase} is used to group the data by water year.

<<echo=TRUE>>=
# There are no missing values
RRVM.wyDF <- aggregate(Flow ~ 
    waterYear(Date), 
    data=RRVM, FUN=mean)
# Change the name of the grouping column
names(RRVM.wyDF)[1] <- "WaterYear"
# Print the first few values of the output
head(RRVM.wyDF)
@

Other grouping functions include \texttt{year} (calendar year) in \texttt{lubridate}, \texttt{month} (month) in \texttt{lubridate}, \texttt{seasons} (user-defined seasons) in \texttt{USGSwsBase}. Refer to the documentation for each of these function for a description of the arguments.

\eject
\section{Computing Year and Month Mean Values}

Aggregation can also be done by multiple grouping variables. This example computes the mean streamflow for each month by year. This example uses the  \texttt{year} and the \texttt{month} functions because the output is sorted by groups. The sequence of the groups in the call is important---the sorting is done in the order specified in the formula. For this example, the data are sorted by month and then by year, which in his case, keeps the order correct; grouping by water year would misplace October, November and December. For a calendar year table, the months are in the correct order.

<<echo=TRUE>>=
# There are no missing values
RRVM.my <- aggregate(Flow ~ month(Date, label=TRUE) + year(Date), 
    data=RRVM, FUN=mean)
# Rename columns 1 and 2
names(RRVM.my)[1:2] <- c("Month", "Year")
# Print the first few values of the output
head(RRVM.my)
@

The output dataset may be used as is, or it could be restructured to a table of monthly values for each water year. To do that, a column of water year must be added and the order months must be set to correspond to those in the water year. The following script uses the \texttt{\%in\%} function to recode the water year from the year.

<<echo=TRUE>>=
# Create new object, compute the water year and round Flow
RRVM.myTbl <- transform(RRVM.my, 
    WY=ifelse(Month %in% c("Oct", "Nov", "Dec"), Year + 1, Year),
    Flow=signif(Flow, 3))
# Reorder months
RRVM.myTbl$Month <- factor(RRVM.myTbl$Month, 
    levels=c("Oct", "Nov", "Dec", "Jan", "Feb", "Mar", "Apr", "May",
             "Jun", "Jul", "Aug", "Sep"))
# Restructure the dataset, overwrite the new object
RRVM.myTbl <- group2row(RRVM.myTbl, "WY", "Month", "Flow")
# Print the first few values of the output, set width for Vignette
options(width=70)
head(RRVM.myTbl)
@

Note that this example used the \texttt{group2row} function in \texttt{USGSwsBase}. The \texttt{reshape} function in \texttt{stats} and \texttt{stack} and \texttt{unstack} functions in \texttt{utils} are other functions that will restructure data.
\end{document}
